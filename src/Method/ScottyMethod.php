<?php

namespace Phabalicious\Method;

use Phabalicious\Configuration\ConfigurationService;
use Phabalicious\Configuration\HostConfig;
use Phabalicious\Configuration\Storage\Node;
use Phabalicious\Utilities\Utilities;
use Phabalicious\Validation\ValidationErrorBagInterface;
use Phabalicious\Validation\ValidationService;

class ScottyMethod extends BaseMethod
{
    use ScaffoldHelperTrait;

    public function getName(): string
    {
        return "scotty";
    }

    public function supports(string $method_name): bool
    {
        return $method_name === $this->getName();
    }

    public function getDefaultConfig(
        ConfigurationService $configuration_service,
        Node $host_config
    ): Node {
        $parent = parent::getDefaultConfig(
            $configuration_service,
            $host_config
        );
        $config = [
            "scotty" => $configuration_service->getSetting("scotty", []),
        ];
        $config["executables"]["scottyctl"] = "scottyctl";
        $config["scotty"]["scaffold"] = $this->getScaffoldDefaultConfig(
            $host_config,
            $config,
            "scotty"
        );

        return $parent->merge(
            new Node($config, $this->getName() . " method defaults")
        );
    }

    public function validateConfig(
        ConfigurationService $configuration_service,
        Node $config,
        ValidationErrorBagInterface $errors
    ): void {
        parent::validateConfig($configuration_service, $config, $errors); // TODO: Change the autogenerated stub
        $this->validateScaffoldConfig($config, "scotty", $errors);
        $validation_service = new ValidationService(
            $config->get("scotty"),
            $errors,
            "host." . $config["configName"] . ".scotty"
        );

        $validation_service->isArray(
            "scaffold",
            "The scaffold configuration needs to be an array"
        );
        $validation_service->hasKey(
            "server",
            "The scotty configuration needs a `server` key"
        );
    }

    public function alterConfig(
        ConfigurationService $configuration_service,
        Node $data
    ): void {
        parent::alterConfig($configuration_service, $data);

        $replacements = Utilities::expandVariables([
            "globals" => Utilities::getGlobalReplacements(
                $configuration_service
            ),
            "settings" => $configuration_service->getAllSettings(),
            "host" => $data->asArray(),
        ]);

        $data->expandReplacements($replacements, []);
    }

    public function scaffoldApp(
        HostConfig $host_config,
        TaskContext $context
    ): string {
        $project_folder = $context->get(
            "installDir",
            Utilities::getTempFolder($host_config, "scotty")
        );
        $shell = $host_config->shell();
        $this->runScaffolder(
            $host_config,
            $context,
            $shell,
            $project_folder,
            "scotty"
        );
        return $project_folder;
    }

    protected function destroyApp(
        HostConfig $host_config,
        TaskContext $context
    ): void {
        $options = new ScottyCtlOptions($host_config, $context);
        $result = $options->runInShell($host_config->shell(), "destroy");
        if ($result->failed()) {
            $result->throwException("Failed to run scottyctl destroy");
        }
    }

    protected function createApp(
        HostConfig $host_config,
        TaskContext $context
    ): void {
        $app_folder = $this->scaffoldApp($host_config, $context);
        $options = new ScottyCtlCreateOptions($host_config, $context);
        $result = $options->runInShell($host_config->shell(), "create", [
            "app_folder" => $app_folder,
        ]);
        if ($result->failed()) {
            $result->throwException("Failed to run scottyctl create");
        }
    }

    public function deploy(HostConfig $host_config, TaskContext $context): void
    {
        $this->createApp($host_config, $context);
    }

    public function appCheckExisting(
        HostConfig $host_config,
        TaskContext $context
    ): bool {
        $options = new ScottyCtlOptions($host_config, $context);
        $result = $options
            ->runInShell($host_config->shell(), "info")
            ->succeeded();
        $context->setResult("appExists", $result);
        return $result;
    }

    public function appCreate(
        HostConfig $host_config,
        TaskContext $context
    ): void {
        $stage = $context->get("currentStage");
        if (!$stage) {
            throw new \InvalidArgumentException("Missing current stage");
        }
        if ($stage === "installCode") {
            $this->createApp($host_config, $context);
        }
    }

    public function appDestroy(
        HostConfig $host_config,
        TaskContext $context
    ): void {
        $stage = $context->get("currentStage");
        if (!$stage) {
            throw new \InvalidArgumentException("Missing current stage");
        }
        if ($stage === "deleteCode") {
            $this->destroyApp($host_config, $context);
        }
    }
}
