<?php

namespace Phabalicious\Method;

use Phabalicious\Configuration\ConfigurationService;
use Phabalicious\Configuration\HostConfig;
use Phabalicious\Configuration\Storage\Node;
use Phabalicious\Utilities\Utilities;
use Phabalicious\Validation\ValidationErrorBagInterface;
use Phabalicious\Validation\ValidationService;

class ScottyMethod extends BaseMethod
{

    use ScaffoldHelperTrait;

    public function getName(): string
    {
        return 'scotty';
    }

    public function supports(string $method_name): bool
    {
        return $method_name === $this->getName();
    }

    public function getDefaultConfig(ConfigurationService $configuration_service, Node $host_config): Node
    {
        $parent = parent::getDefaultConfig($configuration_service, $host_config);
        $config = [
            'scotty' => $configuration_service->getSetting('scotty', []),
        ];
        $config['executables']['scottyctl'] = 'scottyctl';
        $config['scotty']['scaffold'] = $this->getScaffoldDefaultConfig($host_config, $config, 'scotty');

        return $parent->merge(new Node($config, $this->getName() . ' method defaults'));
    }

    public function validateConfig(ConfigurationService $configuration_service, Node $config, ValidationErrorBagInterface $errors): void
    {
        parent::validateConfig($configuration_service, $config, $errors); // TODO: Change the autogenerated stub
        $this->validateScaffoldConfig($config, 'scotty', $errors);
        $validation_service = new ValidationService($config->get('scotty'), $errors, 'host.' . $config['configName']. '.scotty');

        $validation_service->isArray('scaffold', 'The scaffold configuration needs to be an array');
        $validation_service->hasKey('server', 'The scotty configuration needs a `server` key');
    }

    public function scaffoldApp(HostConfig $host_config, TaskContext $context)
    {
        $project_folder = $context->get('installDir', Utilities::getTempFolder($host_config, 'scotty'));
        $shell = $host_config->shell();
        $this->runScaffolder($host_config, $context, $shell, $project_folder, 'scotty');
    }

    public function deploy(HostConfig $host_config, TaskContext $context)
    {
        $this->scaffoldApp($host_config, $context);
        $this->runScottyCtl($host_config, $context, 'deploy');
    }

    protected function runScottyCtl(HostConfig $host_config, TaskContext $context, string $command)
    {
        $shell = $host_config->shell();
        $options = new ScottyCtlOptions($host_config, $context);
        $shell->run(sprintf('#!scottyctl %s', $options->build()));
    }
}
