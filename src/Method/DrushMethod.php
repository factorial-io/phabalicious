<?php

namespace Phabalicious\Method;

use Phabalicious\Configuration\ConfigurationService;
use Phabalicious\Configuration\HostConfig;
use Phabalicious\Exception\ValidationFailedException;
use Phabalicious\ShellProvider\ShellProviderInterface;
use Phabalicious\Utilities\Utilities;
use Phabalicious\Validation\ValidationErrorBag;
use Phabalicious\Validation\ValidationErrorBagInterface;
use Phabalicious\Validation\ValidationService;

class DrushMethod extends BaseMethod implements MethodInterface
{

    public function getName(): string
    {
        return 'drush';
    }

    public function supports(string $method_name): bool
    {
        return (in_array($method_name, ['drush', 'drush7', 'drush8', 'drush9']));
    }

    public function getGlobalSettings(): array
    {
        return [
            'executables' => [
                'drush' => 'drush',
                'mysql' => 'mysql',
                'grep' => 'grep',
                'mysqladmin' => 'mysqladmin',
                'gunzip' => 'gunzip'
            ],
            'sqlSkipTables' => [
                'cache',
                'cache_block',
                'cache_bootstrap',
                'cache_field',
                'cache_filter',
                'cache_form',
                'cache_menu',
                'cache_page',
                'cache_path',
                'cache_update',
                'cache_views',
                'cache_views_data',
            ],
            'revertFeatures' => true,
            'replaceSettingsFile' =>  true,
            'configurationManagement' => [
                'staging' => [
                    '#!drush config-import -y staging'
                ],
            ],
            'installOptions' => [
                'distribution' => 'minimal',
                'locale' => 'en',
                'options' => '',
            ]
        ];
    }

    public function getDefaultConfig(ConfigurationService $configuration_service, array $host_config): array
    {
        $config  = parent::getDefaultConfig($configuration_service, $host_config);

        $keys = ['revertFeatures', 'replaceSettingsFile', 'configurationManagement', 'installOptions'];
        foreach ($keys as $key) {
            $config[$key] = $configuration_service->getSetting($key);
        }
        if (isset($host_config['database'])) {
            $config['database']['host'] = 'localhost';
            $config['database']['skipCreateDatabase'] = false;
        }

        $config['drupalVersion'] = in_array('drush7', $host_config['needs']) ? 7 : 8;
        $config['drushVersion'] = in_array('drush9', $host_config['needs']) ? 9 : 8;

        return $config;
    }

    public function validateConfig(array $config, ValidationErrorBagInterface $errors)
    {
        parent::validateConfig($config, $errors); // TODO: Change the autogenerated stub

        $service = new ValidationService($config, $errors, 'host');

        $service->hasKey('drushVersion', 'the major version of the installed drush tool');
        $service->hasKey('drupalVersion', 'the major version of the drupal-instance');
        $service->hasKey('siteFolder', 'drush needs a site-folder to locate the drupal-instance');
        $service->hasKey('filesFolder', 'drush needs to know where files are stored for this drupal instance');

        if (!empty($config['database'])) {
            $service = new ValidationService($config['database'], $errors, 'host.database');
            $service->hasKeys([
                'host' => 'the database-host',
                'user' => 'the database user',
                'pass' => 'the password for the database-user',
                'name' => 'the database name to use',
            ]);
        }

        if (array_intersect($config['needs'], ['drush7', 'drush8', 'drush9'])) {
            $errors->addWarning(
                'needs',
                '`drush7`, `drush8` and `drush9` are deprecated, ' .
                'please replace with `drush` and set `drupalVersion` and `drushVersion` accordingly.'
            );
        }
    }

    /**
     * @param ConfigurationService $configuration_service
     * @param array $data
     * @throws ValidationFailedException
     */
    public function alterConfig(ConfigurationService $configuration_service, array &$data)
    {
        parent::alterConfig($configuration_service, $data);

        $data['siteFolder'] = Utilities::prependRootFolder($data['rootFolder'], $data['siteFolder']);
        $data['filesFolder'] = Utilities::prependRootFolder($data['rootFolder'], $data['filesFolder']);

        // Late validation of uuid + drupal 8+.
        if ($data['drupalVersion'] >= 8 && !$configuration_service->getSetting('uuid')) {
            $errors = new ValidationErrorBag();
            $errors->addError('global', 'Drupal 8 needs a global uuid-setting');
            throw new ValidationFailedException($errors);
        }
    }


    public function drush(HostConfig $host_config, TaskContextInterface $context)
    {
        $command = $context->get('command');
        $this->runDrush($host_config, $context, $command);
    }

    private function runDrush(HostConfig $host_config, TaskContextInterface $context, $command)
    {
        /** @var ShellProviderInterface $shell */
        $shell = $context->get('shell', $host_config->shell());
        $shell->cd($host_config['siteFolder']);
        $result = $shell->run('#!drush ' . $command);
        $context->setResult('exitCode', $result->getExitCode());
    }

}