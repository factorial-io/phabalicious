<?php


namespace Phabalicious\Artifact\Actions\Base;

use Phabalicious\Artifact\Actions\ActionBase;
use Phabalicious\Configuration\HostConfig;
use Phabalicious\Method\TaskContextInterface;
use Phabalicious\ShellProvider\ShellProviderInterface;
use Phabalicious\Utilities\Utilities;
use Phabalicious\Validation\ValidationService;

class DockerCopyAction extends ActionBase
{
    protected $dockerImageName = false;

    protected function validateArgumentsConfig(array $action_arguments, ValidationService $validation)
    {
        $validation->hasKey('image', 'action needs a docker image argument');
        $validation->hasKey('to', 'action needs a to argument');
        $validation->hasKey('from', 'action needs a from argument');
    }

    public function run(HostConfig $host_config, TaskContextInterface $context) {
        $this->getDockerImage($host_config, $context);
        parent::run($host_config, $context); // TODO: Change the autogenerated stub
    }

    protected function getDockerImage(HostConfig $host_config, TaskContextInterface $context) {
        $variables = Utilities::buildVariablesFrom($host_config, $context);
        $replacements = Utilities::expandVariables($variables);

        $this->dockerImageName = Utilities::expandString($this->getArgument('image'), $replacements);
    }

    protected function getDirectoryContents(ShellProviderInterface $shell, string $path)
    {
        $result = $shell->run(sprintf(
            'docker run --entrypoint %s --rm %s -- cd %s && ls -1a',
            $this->getArgument('entryPoint', '/bin/sh'),
            $this->dockerImageName,
            $path
        ), true);
        return $result->getOutput();
    }

    protected function runImplementation(
        HostConfig $host_config,
        TaskContextInterface $context,
        ShellProviderInterface $shell,
        string $install_dir,
        string $target_dir
    ) {
        $shell->pushWorkingDir($install_dir);

        $files_to_copy = $this->getArgument('from');
        if (!is_array($files_to_copy)) {
            if ($files_to_copy === '*') {
                $files_to_copy = $this->getDirectoryContents($shell, $this->getArgument('imageRootPath', $install_dir));
            } else {
                $files_to_copy = [$files_to_copy];
            }
        }

        $files_to_skip = $context->getConfigurationService()->getSetting('excludeFiles.gitSync', []);

        // Make sure that git-related files are skipped.
        $files_to_skip[] = ".git";
        $to = $target_dir . '/' . $this->getArgument('to');

        // Make sure the target directory exists before copying.
        $shell->run(sprintf('mkdir -p %s', $to));

        foreach ($files_to_copy as $file) {
            if (!in_array($file, $files_to_skip)) {
                $shell->run(sprintf('rm -rf %s', $to . '/' . basename($file)));
                $shell->run(sprintf('cp -a %s %s', $file, $to));
            }
        }

        $shell->popWorkingDir();
    }
}
