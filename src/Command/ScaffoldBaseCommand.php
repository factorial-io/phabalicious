<?php

/** @noinspection PhpRedundantCatchClauseInspection */

namespace Phabalicious\Command;

use Phabalicious\Configuration\ConfigurationService;
use Phabalicious\Exception\FabfileNotReadableException;
use Phabalicious\Exception\FailedShellCommandException;
use Phabalicious\Exception\MismatchedVersionException;
use Phabalicious\Exception\MissingScriptCallbackImplementation;
use Phabalicious\Exception\UnknownReplacementPatternException;
use Phabalicious\Exception\ValidationFailedException;
use Phabalicious\Method\MethodFactory;
use Phabalicious\Method\TaskContextInterface;
use Phabalicious\Scaffolder\Options;
use Phabalicious\Scaffolder\Scaffolder;
use Phabalicious\ShellProvider\CommandResult;
use Phabalicious\Utilities\InputDefinitionWithDynamicOptions;
use Phabalicious\Utilities\Utilities;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;

abstract class ScaffoldBaseCommand extends BaseOptionsCommand
{
    protected Scaffolder $scaffolder;
    protected $mergedDefinition;

    public function __construct(ConfigurationService $configuration, MethodFactory $method_factory, $name = null)
    {
        parent::__construct($configuration, $method_factory, $name);

        $this->scaffolder = new Scaffolder($configuration);
    }

    protected function configure()
    {
        parent::configure();

        $this
            ->addOption(
                'base-url',
                'b',
                InputOption::VALUE_OPTIONAL,
                'base url to use for relative references using "@"'
            );
    }

    public function mergeApplicationDefinition(bool $mergeArgs = true)
    {
        parent::mergeApplicationDefinition($mergeArgs);
        $this->mergedDefinition = new InputDefinitionWithDynamicOptions(parent::getDefinition()); // TODO: Change the autogenerated stub

        return $this->mergedDefinition;
    }

    public function getDefinition(): InputDefinition
    {
        return $this->mergedDefinition ?? parent::getDefinition(); // TODO: Change the autogenerated stub
    }

    /**
     * Scaffold sth from an file/url.
     *
     * @return CommandResult
     *
     * @throws FabfileNotReadableException
     * @throws FailedShellCommandException
     * @throws MismatchedVersionException
     * @throws MissingScriptCallbackImplementation
     * @throws UnknownReplacementPatternException
     * @throws ValidationFailedException
     */
    protected function scaffold(
        $url,
        $root_folder,
        TaskContextInterface $context,
        array $tokens,
        Options $options,
    ) {
        $options
            ->setAllowOverride(
                Utilities::hasBoolOptionSet($context->getInput(), 'force')
                || Utilities::hasBoolOptionSet($context->getInput(), 'override')
                || $options->getAllowOverride()
            )
            ->setBaseUrl($context->getInput()->getOption('base-url'))
            ->setCompabilityVersion($this->getApplication()->getVersion());

        $definition = $this->getDefinition();
        if ($definition instanceof InputDefinitionWithDynamicOptions) {
            $dynamic_options = [];
            foreach ($definition->getDynamicOptions() as $option_name) {
                $dynamic_options[$option_name] = $context->getInput()
                ->getOption($option_name);
            }
            $options->setDynamicOptions($dynamic_options);
        }

        return $this->scaffolder->scaffold($url, $root_folder, $context, $tokens, $options);
    }
}
